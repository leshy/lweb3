// Generated by CoffeeScript 1.9.3
(function() {
  var Backbone, _, core, helpers, nssocketChannel, subscriptionMan, util, v, validator;

  _ = require('underscore');

  Backbone = require('backbone4000');

  helpers = require('helpers');

  subscriptionMan = require('subscriptionman2');

  validator = require('validator2-extras');

  v = validator.v;

  core = require('../core');

  util = require('util');

  nssocketChannel = exports.nssocketChannel = core.channel.extend4000({
    defaults: {
      name: 'nsSocket'
    },
    initialize: function() {
      return this.when('nssocket', (function(_this) {
        return function(nssocket) {
          _this.bindSocket(nssocket);
          return _this.on('change:nssocket', function(self, nssocket) {
            return _this.bindSocket(nssocket);
          });
        };
      })(this));
    },
    bindSocket: function(nssocket1) {
      this.nssocket = nssocket1;
      this.nssocket.on(['data', 'msg'], (function(_this) {
        return function(msg) {
          _this.log('< ' + util.inspect(msg, {
            depth: 0
          }), msg, 'in');
          return _this.event(msg, _this.realm);
        };
      })(this));
      this.nssocket.on('error', (function(_this) {
        return function(e) {
          return _this.trigger('error', e);
        };
      })(this));
      this.nssocket.on('start', (function(_this) {
        return function() {
          return _this.trigger('connect');
        };
      })(this));
      this.nssocket.on('close', (function(_this) {
        return function() {
          _this.trigger('disconnect');
          _this.log("Lost Connection");
          return _this.end();
        };
      })(this));
      return this.when('parent', (function(_this) {
        return function(parent) {
          return _this.nssocket.on(['data', 'msg'], function(msg) {
            return parent.event(msg, _this.realm);
          });
        };
      })(this));
    },
    send: function(msg) {
      this.log("> " + util.inspect(msg, {
        depth: 0
      }), msg, "out");
      return this.nssocket.send('msg', msg);
    },
    end: function() {
      this.nssocket.destroy();
      return core.channel.prototype.end.call(this);
    }
  });

}).call(this);
