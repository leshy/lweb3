(function(){
  var redis, crypto, ref$, map, flattenDeep, Backbone, subscriptionMan, core, out$ = typeof exports != 'undefined' && exports || this;
  redis = require('redis');
  crypto = require('crypto');
  ref$ = require('leshdash'), map = ref$.map, flattenDeep = ref$.flattenDeep;
  Backbone = require('backbone4000/extras');
  subscriptionMan = require('subscriptionman2');
  core = require('../core');
  out$.redis = redis = core.bus.extend4000({
    initialize: function(){
      if (!this.get('name')) {
        this.set({
          name: crypto.randomBytes(32).toString('base64')
        });
      }
      this.pub = redis.createClient();
      this.sub = redis.createClient();
      return this.sub.subscribe("name:" + this.get('name'));
    },
    addTag: function(tag, data){
      var this$ = this;
      data == null && (data = true);
      return p.all(data !== true ? this.sub.subscribe("bus,", tag + ":" + data) : true, this.sub.subscribe("bus." + tag)).then(function(){
        return Backbone.Tagged.prototype.addTag.call(this$, tag, data);
      });
    },
    delTag: function(tag){
      var val, this$ = this;
      val = this.tags[tag];
      return p.all(val !== true ? this.sub.unsubscribe("bus,", tag + ":" + val) : true, this.sub.unsubscribe("bus." + tag)).then(function(){
        return Backbone.Tagged.prototype.delTag.call(this$, tag, data);
      });
    }
  });
}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2xlc2gvY29kaW5nL3Jlc2JvdS9jb3JlL25vZGVfbW9kdWxlcy9sd2ViMy9idXMvcmVkaXMubHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7RUFHRSxLQUFBLENBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBO0VBQ0EsTUFBQSxDQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsUUFBQTtFQUNBLElBQUEsR0FBQSxPQUFBLENBQUEsVUFBQSxDQUFBLEVBQVksR0FBWixDQUFBLENBQUEsQ0FBQSxJQUFBLENBQVksR0FBWixFQUFpQixXQUFqQixDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWlCO0VBQ00sUUFBdkIsQ0FBQSxDQUFBLENBQUEsT0FBQSxDQUFBLHFCQUFBO0VBQ2tCLGVBQWxCLENBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxrQkFBQTtFQUNBLElBQUEsQ0FBQSxDQUFBLENBQUEsT0FBQSxDQUFBLFNBQUE7ZUFFSyxLQUFNLENBQUEsQ0FBQSxDQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsV0FDdEI7SUFBQSxZQUFZLFFBQUEsQ0FBQTtNQUNWLElBQUcsQ0FBSSxJQUFDLENBQUEsR0FBTCxDQUFTLE1BQUQsQ0FBWDtRQUF5QixJQUFDLENBQUEsSUFBSTtVQUFBLE1BQU0sTUFBTSxDQUFDLFlBQVksRUFBRCxDQUFJLENBQUMsU0FBUyxRQUFBO1FBQXRDLENBQUE7O01BQzlCLElBQUMsQ0FBQSxHQUFJLENBQUEsQ0FBQSxDQUFFLEtBQUssQ0FBQyxhQUFZO01BQ3pCLElBQUMsQ0FBQSxHQUFJLENBQUEsQ0FBQSxDQUFFLEtBQUssQ0FBQyxhQUFZO2FBRXpCLElBQUMsQ0FBQSxHQUFHLENBQUMsVUFBVSxPQUFBLENBQUEsQ0FBQSxDQUFTLElBQUMsQ0FBQSxHQUFWLENBQWMsTUFBQSxDQUF4Qjs7SUFFUCxRQUFRLFFBQUEsQ0FBQSxHQUFBLEVBQUEsSUFBQTs7TUFBTSxpQkFBQSxPQUFLO2FBQ2pCLENBQUMsQ0FBQyxJQUNHLElBQUssQ0FBQSxHQUFBLENBQUssS0FBSyxFQUFLLElBQUMsQ0FBQSxHQUFHLENBQUMsVUFBZ0IsUUFBQyxHQUFJLENBQUEsQ0FBQSxDQUFLLEdBQUMsQ0FBQSxDQUFBLENBQUUsSUFBYixFQUFrQixFQUFLLE1BQ25FLElBQUMsQ0FBQSxHQUFHLENBQUMsVUFBZ0IsTUFBQyxDQUFBLENBQUEsQ0FBRSxHQUFILENBRHJCLENBR0YsQ0FBQyxLQUFLLFFBQUEsQ0FBQTtlQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUEsU0FBRSxDQUFBLE1BQU0sQ0FBQyxLQUFLLE9BQUcsS0FBSyxJQUFSO09BQWhDOztJQUVSLFFBQVEsUUFBQSxDQUFBLEdBQUE7O01BQ04sR0FBSSxDQUFBLENBQUEsQ0FBRSxJQUFDLENBQUEsSUFBSSxDQUFFLEdBQUY7YUFDWCxDQUFDLENBQUMsSUFDRyxHQUFJLENBQUEsR0FBQSxDQUFLLEtBQUssRUFBSyxJQUFDLENBQUEsR0FBRyxDQUFDLFlBQWtCLFFBQUMsR0FBSSxDQUFBLENBQUEsQ0FBSyxHQUFDLENBQUEsQ0FBQSxDQUFFLEdBQWIsRUFBaUIsRUFBSyxNQUNuRSxJQUFDLENBQUEsR0FBRyxDQUFDLFlBQWtCLE1BQUMsQ0FBQSxDQUFBLENBQUUsR0FBSCxDQUR2QixDQUdGLENBQUMsS0FBSyxRQUFBLENBQUE7ZUFBRyxRQUFRLENBQUMsTUFBTSxDQUFBLFNBQUUsQ0FBQSxNQUFNLENBQUMsS0FBSyxPQUFHLEtBQUssSUFBUjtPQUFoQzs7RUFwQlIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIiMgYXV0b2NvbXBpbGVcblxucmVxdWlyZSEge1xuICByZWRpc1xuICBjcnlwdG9cbiAgbGVzaGRhc2g6IHsgbWFwLCBmbGF0dGVuRGVlcCB9XG4gICdiYWNrYm9uZTQwMDAvZXh0cmFzJzogQmFja2JvbmVcbiAgc3Vic2NyaXB0aW9ubWFuMjogc3Vic2NyaXB0aW9uTWFuXG4gICcuLi9jb3JlJ1xufVxuZXhwb3J0IHJlZGlzID0gY29yZS5idXMuZXh0ZW5kNDAwMCBkb1xuICBpbml0aWFsaXplOiAtPlxuICAgIGlmIG5vdCBAZ2V0KCduYW1lJykgdGhlbiBAc2V0IG5hbWU6IGNyeXB0by5yYW5kb21CeXRlcygzMikudG9TdHJpbmcgJ2Jhc2U2NCdcbiAgICBAcHViID0gcmVkaXMuY3JlYXRlQ2xpZW50IVxuICAgIEBzdWIgPSByZWRpcy5jcmVhdGVDbGllbnQhXG5cbiAgICBAc3ViLnN1YnNjcmliZSBcIm5hbWU6I3sgQGdldCAnbmFtZScgfVwiXG5cbiAgYWRkVGFnOiAodGFnLCBkYXRhPXRydWUpIC0+XG4gICAgcC5hbGwgZG9cbiAgICAgIGlmIGRhdGEgaXNudCB0cnVlIHRoZW4gQHN1Yi5zdWJzY3JpYmUgXCJidXMsXCIgdGFnICsgXCI6XCIgKyBkYXRhIGVsc2UgdHJ1ZVxuICAgICAgQHN1Yi5zdWJzY3JpYmUgXCJidXMuXCIgKyB0YWdcbiAgICAgIFxuICAgIC50aGVuIH4+IEJhY2tib25lLlRhZ2dlZDo6YWRkVGFnLmNhbGwgQCwgdGFnLCBkYXRhXG5cbiAgZGVsVGFnOiAodGFnKSAtPlxuICAgIHZhbCA9IEB0YWdzWyB0YWcgXVxuICAgIHAuYWxsIGRvXG4gICAgICBpZiB2YWwgaXNudCB0cnVlIHRoZW4gQHN1Yi51bnN1YnNjcmliZSBcImJ1cyxcIiB0YWcgKyBcIjpcIiArIHZhbCBlbHNlIHRydWVcbiAgICAgIEBzdWIudW5zdWJzY3JpYmUgXCJidXMuXCIgKyB0YWdcbiAgICAgIFxuICAgIC50aGVuIH4+IEJhY2tib25lLlRhZ2dlZDo6ZGVsVGFnLmNhbGwgQCwgdGFnLCBkYXRhXG5cblxuICAgIFxuIl19
