// Generated by LiveScript 1.4.0
(function(){
  var _, Backbone, h, helpers, async, subscriptionMan, validator, v, core, query, colors, jsDataAdapter, callbackToQuery, queryToCallback, server, serverServer;
  _ = require('underscore');
  Backbone = require('backbone4000');
  h = helpers = require('helpers');
  async = require('async');
  subscriptionMan = require('subscriptionman2');
  validator = require('validator2-extras');
  v = validator.v;
  core = require('../core');
  query = require('./query');
  colors = require('colors');
  jsDataAdapter = exports.jsDataAdapter = (function(){
    jsDataAdapter.displayName = 'jsDataAdapter';
    var prototype = jsDataAdapter.prototype, constructor = jsDataAdapter;
    function jsDataAdapter(connection){
      true;
      this.connection = connection;
    }
    prototype.query = function(msg, callback){
      var this$ = this;
      return new p(function(resolve, reject){
        return this$.connection.query({
          ds: msg
        }, function(data){
          return resolve(data);
        });
      });
    };
    prototype.create = function(resource, attrs, options){
      return this.query({
        resource: resource.name,
        create: {
          attrs: attrs,
          options: options
        }
      });
    };
    prototype.find = function(resource, id, options){
      return this.query({
        resource: resource.name,
        find: {
          id: id,
          options: options
        }
      });
    };
    prototype.findAll = function(resource, params, options){
      return this.query({
        resource: resource.name,
        findAll: {
          params: params,
          options: options
        }
      });
    };
    prototype.update = function(resource, id, attrs, options){
      return this.query({
        resource: resource.name,
        update: {
          id: id,
          attrs: attrs,
          options: options
        }
      });
    };
    prototype.updateAll = function(resource, attrs, params, options){
      return this.query({
        resource: resource.name,
        update: {
          params: params,
          attrs: attrs,
          options: options
        }
      });
    };
    prototype.destroy = function(resource, id, options){
      return this.query({
        resource: resource.name,
        destroy: {
          id: id,
          options: options
        }
      });
    };
    prototype.destroyAll = function(resource, params, options){
      return this.query({
        resource: resource.name,
        destroyAll: {
          params: params,
          options: options
        }
      });
    };
    return jsDataAdapter;
  }());
  callbackToQuery = query.callbackToQuery;
  queryToCallback = query.queryToCallback;
  server = exports.server = core.protocol.extend4000({
    defaults: {
      name: 'jsDataServer'
    },
    requires: [query.server],
    initialize: function(options){
      var this$ = this;
      this.db = options.db;
      return this.when('parent', function(parent){
        console.log(parent.name());
        parent.onQuery({
          ds: {
            resource: String,
            create: Object
          }
        }, function(msg){
          return this$.db.create(msg.ds.resource, msg.ds.create.attrs, msg.ds.create.options);
        });
        parent.onQuery({
          ds: {
            resource: String,
            find: Object
          }
        }, function(msg, reply){
          return this$.db.find(msg.ds.resource, msg.ds.find.id, msg.ds.find.options).then(function(it){
            return reply.end(it);
          });
        });
        parent.onQuery({
          ds: {
            resource: String,
            findAll: Object
          }
        }, function(msg, reply){
          return this$.db.findAll(msg.ds.resource, msg.ds.findAll.params, msg.ds.findAll.options).then(function(it){
            return reply.end(it);
          });
        });
        return parent.onQuery({
          ds: {
            resource: String,
            update: Object
          }
        }, function(msg, reply){
          return this$.db.update(msg.ds.resource, msg.ds.update.id, msg.ds.update.attrs, msg.ds.update.options).then(function(it){
            return reply.end(it);
          });
        });
      });
    }
  });
  serverServer = exports.serverServer = core.protocol.extend4000({
    defaults: {
      name: 'jsDataServerServer'
    },
    initialize: function(options){
      var this$ = this;
      this.db = options.db;
      return this.when('parent', function(parent){
        parent.on('connect', function(client){
          return client.addProtocol(new server({
            verbose: this$.verbose,
            core: this$,
            logger: this$.logger,
            db: this$.db
          }));
        });
        return _.map(parent.clients, function(client, id){
          return client.addProtocol(new server({
            verbose: this$.verbose,
            core: this$,
            logger: this$.logger,
            db: this$.db
          }));
        });
      });
    }
  });
}).call(this);

//# sourceMappingURL=data:application/json;base64,
