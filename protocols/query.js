// Generated by CoffeeScript 1.7.1
(function() {
  var Backbone, client, core, helpers, reply, server, subscriptionMan, v, validator, _;

  _ = require('underscore');

  Backbone = require('backbone4000');

  helpers = require('helpers');

  subscriptionMan = require('subscriptionman2');

  validator = require('validator2-extras');

  v = validator.v;

  core = require('../core');

  client = exports.client = core.protocol.extend4000(validator.ValidatedModel, {
    validator: {
      timeout: v().Default(3000).Number()
    },
    initialize: function() {
      return this.when('parent', (function(_this) {
        return function(parent) {
          return parent.subscribe({
            type: 'reply',
            id: String
          }, function(msg) {
            return _this.event(msg);
          });
        };
      })(this));
    },
    name: 'queryClient',
    send: function(msg, timeout, callback) {
      var id, unsubscribe;
      if (timeout.constructor === Function) {
        callback = timeout;
        timeout = this.get('timeout');
      }
      this.parent.send({
        type: 'query',
        id: id = helpers.uuid(10),
        payload: msg
      });
      return unsubscribe = this.subscribe({
        type: 'reply',
        id: id
      }, function(msg) {
        if (msg.end) {
          unsubscribe();
        }
        return callback(msg.payload, msg.end);
      });
    }
  });

  reply = core.protocol.extend4000({
    write: function(msg) {
      return this.parent.send(msg, this.id, false);
    },
    end: function(msg) {
      return this.parent.send(msg, this.id, true);
    }
  });

  server = exports.server = core.protocol.extend4000({
    name: 'queryServer',
    initialize: function() {
      return this.when('parent', (function(_this) {
        return function(parent) {
          return parent.subscribe({
            type: 'query',
            payload: true
          }, function(msg) {
            return _this.event(msg.payload, msg.id);
          });
        };
      })(this));
    },
    send: function(payload, id, end) {
      var msg;
      if (end == null) {
        end = false;
      }
      msg = {
        type: 'reply',
        payload: payload,
        id: id
      };
      if (end) {
        msg.end = true;
      }
      return this.parent.send(msg);
    },
    subscribe: function(pattern, callback) {
      if (pattern == null) {
        pattern = true;
      }
      return subscriptionMan.fancy.prototype.subscribe.call(this, pattern, (function(_this) {
        return function(payload, id) {
          return callback(payload, new reply({
            id: id,
            parent: _this
          }));
        };
      })(this));
    }
  });

}).call(this);
