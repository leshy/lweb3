// Generated by CoffeeScript 1.7.1
(function() {
  var Backbone, channel, core, h, helpers, logger3, motherShip, protocol, protocolHost, server, startTime, subscriptionMan, v, validator, _;

  _ = require('underscore');

  Backbone = require('backbone4000');

  h = helpers = require('helpers');

  logger3 = require('logger3');

  subscriptionMan = require('subscriptionman2');

  validator = require('validator2-extras');

  v = validator.v;

  startTime = new Date().getTime();

  core = exports.core = subscriptionMan.fancy.extend4000({
    initialize: function() {
      return this.when('parent', (function(_this) {
        return function(parent) {
          _this.parent = parent;
          _this.log = _this.parent.log.child({
            tags: [_this.get('name') || "unnamed"]
          });
          if (_this.get('verbose')) {
            return _this.log.outputs.push(new logger3.Console());
          }
        };
      })(this));
    },
    name: function() {
      if (this.parent) {
        return this.parent.name() + "-" + this.get('name');
      } else {
        return this.get('name') || 'noname';
      }
    },
    end: function() {
      if (this.ended) {
        return;
      } else {
        this.ended = true;
      }
      this.log('ending');
      return this.trigger('end');
    }
  });

  protocolHost = exports.protocolHost = core.extend4000({
    log: function() {
      return true;
    },
    initialize: function(options) {
      var logSettings;
      if (options == null) {
        options = {};
      }
      if (this.get('log') != null) {
        this.log = this.get('log');
      } else if (!this.get('parent')) {
        logSettings = {
          outputs: {},
          context: {
            tags: [this.get('name')]
          }
        };
        this.log = new logger3.Logger(h.extend(logSettings, options.logSettings || {}));
        if (this.get('verbose')) {
          this.log.outputs.push(new logger3.Console());
        }
      }
      return this.protocols = {};
    },
    hasProtocol: function(protocol) {
      if (typeof protocol === 'function') {
        return Boolean(this[protocol.prototype.defaults.name]);
      }
      if (typeof protocol === 'object') {
        return Boolean(this[protocol.name()]);
      }
      throw "what is this?";
    },
    addProtocol: function(protocol) {
      var name;
      if (!(name = protocol.name())) {
        throw "what is this?";
      }
      if (this.hasProtocol(protocol)) {
        return;
      }
      _.map(protocol.requires, (function(_this) {
        return function(dependancyProtocol) {
          if (!_this.hasProtocol(dependancyProtocol)) {
            return _this.addProtocol(new dependancyProtocol());
          }
        };
      })(this));
      this[name] = protocol;
      protocol.set({
        parent: this
      });
      if (protocol.functions) {
        return _.extend(this, protocol.functions());
      }
    }
  });

  channel = exports.channel = protocolHost.extend4000({
    initialize: function() {
      return this.realm = this.getRealm();
    },
    send: function(msg) {
      throw 'not implemented';
    },
    getRealm: function() {
      return {
        client: this
      };
    }
  });

  protocol = exports.protocol = core.extend4000({
    requires: []
  });

  server = exports.server = protocolHost.extend4000({
    initialize: function() {
      var channelClass;
      this.clients = this.children = {};
      if (channelClass = this.get('channelClass') || this.channelClass) {
        return this.channelClass = this.defaultChannelClass.extend4000(channelClass);
      } else {
        return this.channelClass = this.defaultChannelClass;
      }
    }
  });

  motherShip = exports.motherShip = function(name) {
    var model;
    model = {};
    model.initialize = function() {
      return this[name + "s"] = {};
    };
    model[name] = function(instanceName, attributes) {
      var instance, instanceClass;
      if (attributes == null) {
        attributes = {};
      }
      if (instance = this[name + "s"][instanceName]) {
        return instance;
      }
      instanceClass = this.get(name + "Class");
      if (!instanceClass) {
        throw "I don't have " + name + "Class defined";
      }
      instance = this[name + "s"][instanceName] = new instanceClass(_.extend({
        parent: this,
        name: instanceName
      }, attributes));
      instance.once('end', (function(_this) {
        return function() {
          return delete _this[name + "s"][instanceName];
        };
      })(this));
      this.trigger('new' + helpers.capitalize(name), instance);
      return instance;
    };
    return Backbone.Model.extend4000(model);
  };

}).call(this);
