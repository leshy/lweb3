// Generated by CoffeeScript 1.7.1
(function() {
  var Backbone, channel, core, helpers, motherShip, protocol, server, startTime, subscriptionMan, v, validator, _,
    __slice = [].slice;

  _ = require('underscore');

  Backbone = require('backbone4000');

  helpers = require('helpers');

  subscriptionMan = require('subscriptionman2');

  validator = require('validator2-extras');

  v = validator.v;

  startTime = new Date().getTime();

  core = exports.core = subscriptionMan.fancy.extend4000({
    initialize: function() {
      this.verbose = this.get('verbose') || false;
      return this.when('parent', (function(_this) {
        return function(parent) {
          var _ref;
          _this.parent = parent;
          return _this.verbose = _this.get('verbose') || ((_ref = _this.parent) != null ? _ref.verbose : void 0) || false;
        };
      })(this));
    },
    name: function() {
      if (this.parent) {
        return this.parent.name() + "-" + this.get('name');
      } else {
        return this.get('name') || 'noname';
      }
    },
    end: function() {
      if (this.ended) {
        return;
      } else {
        this.ended = true;
      }
      this.log('ending');
      return this.trigger('end');
    },
    log: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (this.verbose) {
        return console.log.apply(console, [].concat('::', new Date().getTime() - startTime, this.name(), args));
      }
    }
  });

  channel = exports.channel = core.extend4000({
    initialize: function() {
      return this.protocols = {};
    },
    send: function(msg) {
      throw "I'm a default channel, cant send msg " + msg;
    },
    hasProtocol: function(protocol) {
      if (typeof protocol === 'function') {
        return Boolean(this[protocol.prototype.defaults.name]);
      }
      if (typeof protocol === 'object') {
        return Boolean(this[protocol.name()]);
      }
      throw "what is this?";
    },
    addProtocol: function(protocol) {
      var name;
      if (!(name = protocol.name())) {
        throw "what is this?";
      }
      if (this.hasProtocol(protocol)) {
        throw "this protocol (" + (protocol.name()) + ") is already active on channel";
      }
      _.map(protocol.requires, (function(_this) {
        return function(dependancyProtocol) {
          if (!_this.hasProtocol(dependancyProtocol)) {
            return _this.addProtocol(new dependancyProtocol());
          }
        };
      })(this));
      this[name] = protocol;
      protocol.set({
        parent: this
      });
      if (protocol.functions) {
        return _.extend(this, protocol.functions());
      }
    }
  });

  protocol = exports.protocol = core.extend4000({
    requires: []
  });

  server = exports.server = core.extend4000({
    stop: function() {
      return true;
    }
  });

  motherShip = exports.motherShip = function(name) {
    var model;
    model = {};
    model.initialize = function() {
      return this[name + "s"] = {};
    };
    model[name] = function(instanceName) {
      var instance, instanceClass;
      if (instance = this[name + "s"][instanceName]) {
        return instance;
      }
      instanceClass = this.get(name + "Class");
      if (!instanceClass) {
        throw "I don't have " + name + "Class defined";
      }
      instance = this[name + "s"][instanceName] = new instanceClass({
        parent: this,
        name: instanceName
      });
      instance.once('end', (function(_this) {
        return function() {
          return delete _this[name + "s"][instanceName];
        };
      })(this));
      this.trigger('new' + helpers.capitalize(name), instance);
      return instance;
    };
    return Backbone.Model.extend4000(model);
  };

}).call(this);
